#!/usr/bin/env ruby
require 'pathname'

# get the real path of this file so we can load the library
file = Pathname.new(__FILE__).realpath

# save the original invocation so we can restart ourselves later
INVOCATION = [file.to_s, *ARGV]

# chdir to this project's directory so bundler will be able to find
# the .bundle directory itself
oldpwd = Dir.pwd
Dir.chdir(File.expand_path('../..', file))

# load dependencies
$:.push File.expand_path("../../lib", file)
require 'rubygems'
require 'wesabot'
require 'optparse'
require 'openssl'

config = Campfire::Configuration.new
daemonize = false
pidfile = nil

# get configuration from ARGV
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("-c", "--config FILE", "Configuration file") do |path|
    config = Campfire::FileConfiguration.new(File.expand_path(path, oldpwd))
  end

  opts.separator "OR"

  opts.on("-t", "--token TOKEN", "API token (required)") do |api_token|
    config.api_token = api_token
  end

  opts.on("-d", "--subdomain SUBDOMAIN", "Campfire subdomain (required)") do |subdomain|
    config.subdomain = subdomain
  end

  opts.on("-r", "--room ROOM", "Campfire room (required)") do |room|
    config.room = room
  end

  opts.on("--database PATH", "The sqlite3 database to use (required)") do |path|
    config.datauri = "sqlite3://#{Pathname(File.expand_path(path, oldpwd)).expand_path}"
  end

  opts.on("-D", "--daemonize", "Daemonize the bot (run in the background)") do
    daemonize = true
  end

  opts.on("--pid-file PATH", "PID file to write the daemon's PID to") do |path|
    pidfile = path
  end

  opts.on("-o", "--log-file PATH", "The file to log STDOUT and STDERR to") do |path|
    config.logger = Logger.new(path)
  end

  opts.on("-k", "--ssl-no-verify", "Don't verify SSL certs") do
    config.ssl_verify = false
  end

  opts.on("-v", "--verbose", "Be verbose") do
    config.verbose = true
  end

  opts.on("--version", "Print version") do
    puts Campfire::VERSION
    exit
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

# check for required options
begin
  optparse.parse!
  config.validate!

  config.logger.level = config.verbose?? Logger::DEBUG : Logger::INFO

  if daemonize
    require 'daemons'
    puts "Daemonizing..."
    Daemons.daemonize
  end

  File.open(pidfile, 'w') {|f| f << $$.to_s } if pidfile
rescue Campfire::ConfigurationError, OptionParser::InvalidOption, OptionParser::MissingArgument => e
  puts "#{File.basename($0)}: #{e}"
  puts optparse
  exit(1)
end

OpenSSL::debug = config.verbose?

bot = Campfire::PollingBot.new(config)
trap(:INT)  { bot.leave; exit }
trap(:TERM) { bot.leave; exit }
bot.run